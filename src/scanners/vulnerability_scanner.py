import socket
import requests

class VulnerabilityScanner:
    def __init__(self, target_host):
        self.target_host = target_host
        self.vulnerabilities = []

    def check_open_ports(self, ports):
        """Check for open ports"""
        open_ports = []
        for port in ports:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex((self.target_host, port))
            if result == 0:
                open_ports.append(port)
            sock.close()
        return open_ports

    def check_outdated_software(self, service, version):
        """Check for outdated software versions"""
        # This is a placeholder for actual version checking logic
        # In a real implementation, you would query a vulnerability database
        known_vulnerabilities = {
            "nginx": ["1.14.0", "1.15.0"],
            "apache": ["2.4.29", "2.4.30"]
        }
        if service in known_vulnerabilities and version in known_vulnerabilities[service]:
            self.vulnerabilities.append(f"{service} {version} is outdated and vulnerable")

    def scan(self):
        """Perform vulnerability scan"""
        # Example: Check for open ports
        common_ports = [80, 443, 22, 21, 25]
        open_ports = self.check_open_ports(common_ports)
        if open_ports:
            self.vulnerabilities.append(f"Open ports found: {open_ports}")

        # Example: Check for outdated software
        # This is a placeholder for actual service detection logic
        self.check_outdated_software("nginx", "1.14.0")

        return self.vulnerabilities

# Example usage
if __name__ == "__main__":
    scanner = VulnerabilityScanner("example.com")
    vulnerabilities = scanner.scan()
    for vulnerability in vulnerabilities:
        print(vulnerability)